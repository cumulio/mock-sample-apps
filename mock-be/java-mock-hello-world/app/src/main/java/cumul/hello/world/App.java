/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package cumul.hello.world;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URL;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import fi.iki.elonen.NanoHTTPD;
import io.github.cdimascio.dotenv.Dotenv;
import io.cumul.sdk.Cumulio;

import org.json.JSONArray;
import org.json.JSONObject;

import com.auth0.jwt.JWT;
import com.auth0.jwt.algorithms.Algorithm;
import com.auth0.jwt.interfaces.DecodedJWT;
import com.google.common.collect.ImmutableMap;

import cumul.User;

public class App extends NanoHTTPD {

    static private Dotenv dotenv;
    static private ArrayList<User> users = new ArrayList<User>();
    
    public App() throws IOException {
        super(4001);
        start(NanoHTTPD.SOCKET_READ_TIMEOUT, false);
        System.out.println("\nRunning! Point your browsers to http://localhost:4001/ \n");
    }

    public static void main(String[] args) {
        users.add(new User("brad", "brad", "brad@mars-boots.com", "Mars Boots"));
        users.add(new User("angelina", "angelina", "angelina@earthly-shoes.com", "Earthly Shoes"));

        try {
            dotenv = Dotenv
                .configure()
                .directory("../")
                .systemProperties()
                .load();
            System.out.println(dotenv.get("CUMUL_KEY"));
            new App();
        } catch (IOException ioe) {
            System.err.println("Couldn't start server:\n" + ioe);
        }
    }

    @Override
    public Response serve(IHTTPSession session) {
        try {
            System.out.println(session.getMethod());
            if (session.getMethod() == Method.POST) {

                Map<String, String> files = new HashMap<String, String>();
                try {
                    session.parseBody(files);
                } catch (IOException | ResponseException ioe) {
                    // stop
                }
                
                JSONObject userObj = new JSONObject(files.get("postData"));
                User selectedUser = null;

                for (User user : users) {
                    if (user.email.equals(userObj.getString("email"))) {
                        selectedUser = user;
                        break;
                    }
                }
                // Handle POST request here
                // Get body data and check if user is correct
                Algorithm algorithm = Algorithm.HMAC256("randomSecretKey");
                System.out.println("Selected User" + selectedUser);
                String token = null;
                if (selectedUser != null) {
                    token = JWT.create()
                    .withClaim("username", selectedUser.username)
                    .withClaim("name", selectedUser.name)
                    .withClaim("email", selectedUser.email)
                    .withClaim("brand", selectedUser.brand)
                    .sign(algorithm);
                }

                JSONObject authResponse = new JSONObject();
                authResponse.put("token", token);
                Response response = newFixedLengthResponse(
                    authResponse.toString()
                );
                response.addHeader("Access-Control-Allow-Origin", "*");
                response.addHeader("Access-Control-Allow-Headers", "*");
                response.addHeader("Content-Type", "application/json");
                return response;
                
            } else if (session.getMethod() == Method.OPTIONS) {
                System.out.println("Handle Options");
                // Handle OPTIONS request here.
                Response response = newFixedLengthResponse(Response.Status.OK, MIME_PLAINTEXT ,"success");
                response.addHeader("Access-Control-Allow-Origin", "*");
                response.addHeader("Access-Control-Allow-Headers", "*");
                response.addHeader("Content-Type", "application/json");
                return response;
            } else {
                // Handle GET Request
                String authToken = session.getHeaders().get("authorization");
                String token = authToken.split(" ")[1];

                DecodedJWT userData = JWT.decode(token);

                // Setup connection
                Cumulio client = new Cumulio(dotenv.get("CUMUL_KEY"), dotenv.get("CUMUL_TOKEN"), dotenv.get("API_URL"));
                ImmutableMap metadata = ImmutableMap.builder().put("brand", userData.getClaim("brand").asString()).build();
                // On page requests of pages containing embedded dashboards, request an "authorization"
                JSONObject authorization = client.create("authorization", ImmutableMap.builder()
                    .put("type", "sso")
                    .put("expiry", "24 hours")
                    .put("inactivity_interval", "10 minutes")
                    .put("username", userData.getClaim("username").asString() != null ? userData.getClaim("username").asString() : dotenv.get("USER_USERNAME"))
                    .put("name", userData.getClaim("name").asString() != null ? userData.getClaim("name").asString() : dotenv.get("USER_NAME"))
                    .put("email", userData.getClaim("email").asString() != null ? userData.getClaim("email").asString() : dotenv.get("USER_EMAIL"))
                    .put("suborganization", dotenv.get("USER_SUBORGANIZATION"))
                    .put("integration_id", dotenv.get("INTEGRATION_ID"))
                    .put("role", "viewer")
                    .put("metadata", metadata)
                    .build()
                );
                JSONObject authResponse = new JSONObject();
                authResponse.put("status", "success");
                authResponse.put("key", authorization.getString("id"));
                authResponse.put("token", authorization.getString("token"));
    
                Response response = newFixedLengthResponse(
                    authResponse.toString()
                );
                response.addHeader("Access-Control-Allow-Origin", "*");
                response.addHeader("Access-Control-Allow-Headers", "*");
                response.addHeader("Content-Type", "application/json");
                return response;
            }
        } catch(Exception e) {
            System.out.println(e);
            JSONObject authResponse = new JSONObject();
            authResponse.put("status", "failed");
            Response resp = newFixedLengthResponse(authResponse.toString());
            resp.addHeader("Content-Type", "application/json");
            return resp;
        }

    }

    public static Map<String, String> splitQuery(String query) throws UnsupportedEncodingException {
        Map<String, String> query_pairs = new LinkedHashMap<String, String>();
        String[] pairs = query.split("&");
        for (String pair : pairs) {
            int idx = pair.indexOf("=");
            query_pairs.put(URLDecoder.decode(pair.substring(0, idx), "UTF-8"), URLDecoder.decode(pair.substring(idx + 1), "UTF-8"));
        }
        return query_pairs;
    }
}
